import React, { Component } from 'react';
//'connect' is a function from the react-redux library
import { connect } from "react-redux"; //the glue layer between React and Redux
import { selectBook } from "../actions/index";
//this is a function used to ensure that the action generated by the action creator ends up flowing through all the different reducers
import { bindActionCreators } from "redux";

class BookList extends Component {
  renderList = () => {
    return this.props.books.map(book => {
      return (
        <li key={book.title} className="list-group-item">{book.title}</li>
      );
    });
  }
  
  render() {
    return (
      <ul className="list-group col-sm-4">
        {this.renderList()}
      </ul>
    )
  }
}

//function takes in application state as an argument
function mapStateToProps(state) {
  //whatever is returned from here will show up as props inside BookList
  return {
    //reducer_books.js holds the data in the state object (where the state originates), that reducer is passed to index.js in the 'combineReducers' function, which is now made available here
    books: state.books
    //IMPORTANT: if our application state ever changes - through user clicking to explore a new list of books, then this component will rerender and display the new list of books.
    //IMPORTANT: the state is now availble to the component as 'this.state.books'
  };
}

//anything returned from this function will end up as props on the BookList 
function mapDispatchToProps(dispatch) {
  //whenever selectBook is called, the result should be passed to all of our reducers
  //this is what bind action creators does, it takes all the action creators we pass to it, and passes them to the dispatch function which spits them out to our reducers
  return bindActionCreators({ selectBook: selectBook }, dispatch)
  //we can now reference this.props.selectBook
}

//whenever we make a container, we don't want to export the plain component, we want to export the container (or export it as a container)
//export default BookList;
//the connect function takes a function and component and then produces a container - the difference between the component and the container is that the container is now made aware of the state contained in Redux.
export default connect(mapStateToProps, mapDispatchToProps)(BookList);
//we also need to make the connect method aware of the mapDispatchToProps function which will also help make it available as props.